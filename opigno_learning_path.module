<?php

/**
 * @file
 * Contains opigno_learning_path.module.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\group\Entity\Group;
use Drupal\opigno_learning_path\Entity\LatestActivity;
use Drupal\opigno_learning_path\LearningPathAccess;
use Drupal\opigno_learning_path\Entity\LPManagedContent;
use Drupal\opigno_group_manager\Entity\OpignoGroupManagedContent;
use Drupal\opigno_group_manager\OpignoGroupContext;
use Drupal\opigno_module\Entity\OpignoActivity;
use Drupal\opigno_module\Entity\OpignoModule;
use Drupal\user\Entity\User;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_theme().
 */
function opigno_learning_path_theme()
{
  return [
    'opigno_learning_path_manager' => [
      'variables' => [
        'base_path' => null,
        'base_href' => null,
        'learning_path_id' => null,
      ],
    ],
    'opigno_learning_path_courses' => [
      'variables' => [
        'base_path' => null,
        'base_href' => null,
        'learning_path_id' => null,
        'view_type' => null,
        'next_link' => null
      ],
    ],
    'opigno_learning_path_modules' => [
      'variables' => [
        'base_path' => null,
        'base_href' => null,
        'learning_path_id' => null,
        'module_context' => null,
        'next_link' => null
      ],
    ],
    'opigno_learning_path_item_form' => [
      'variables' => [],
    ],
    'group__learning_path' => [
      'base hook' => 'group',
    ],
    'region__content__admin__learning_path' => [
      'base hook' => 'region',
      'step_list_top' => null,
      'step_list_aside' => null
    ],
    'page__group' => [
      'base hook' => 'page',
      'join_group_form' => null
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function opigno_learning_path_page_attachments(array &$page)
{
  $route = \Drupal::routeMatch()->getRouteName();

  if ($route == 'entity.group.canonical') {
    $page['#attached']['library'][] = 'opigno_learning_path/join';
  }
  if (opigno_learning_path_is_lp_route()) {
    $page['#attached']['library'][] = 'opigno_learning_path/steps_validate';
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function opigno_learning_path_theme_suggestions_alter(array &$suggestions, array $variables, $hook)
{
    if (\Drupal::routeMatch()->getRouteName() == 'opigno_learning_path.manager.get_item_form'
        && $hook == 'page'
    ) {
        $suggestions[] = 'opigno_learning_path_item_form';
    }

    if (opigno_learning_path_is_lp_route()
        && $hook == 'region'
        && in_array('region__content', $suggestions)
    ) {
        $suggestions[] = 'region__content__admin__learning_path';
    }
}

/**
 * Implements hook_preprocess_html().
 */
function opigno_learning_path_preprocess_html(&$variables)
{
    // Remove admin bar for item form (included in iframe)
    if (\Drupal::routeMatch()->getRouteName() == 'opigno_learning_path.manager.get_item_form') {
        unset($variables['page_top']);
    }

    if (opigno_learning_path_is_lp_route()) {
        $variables['attributes']['class'][] = 'admin-learning-path';
    }
}

/**
 * Implements hook_preprocess_region().
 */
function opigno_learning_path_preprocess_region(&$variables)
{
    if (opigno_learning_path_is_lp_route() && $variables['region'] == 'content') {
        $variables['step_list_top'] = opigno_learning_path_get_step_list_top();
        $variables['step_list_aside'] = opigno_learning_path_get_step_list_aside();
        $group = \Drupal::routeMatch()->getParameter('group');
        if ($group instanceof \Drupal\group\Entity\GroupInterface
          && \Drupal::routeMatch()->getRouteName() != 'opigno_group_manager.manager.index'
          && \Drupal::routeMatch()->getRouteName() != 'opigno_learning_path.learning_path_courses'
          && \Drupal::routeMatch()->getRouteName() != 'opigno_learning_path.learning_path_modules'
        ) {
          $current_step = opigno_learning_path_get_current_step();
          // Check if training is published.
          $is_published = $group->get('field_learning_path_published')->getValue()[0]['value'];
          if ($is_published) {
            $publish_text = t('Finish');
          }
          else {
            $publish_text = t('Publish');
          };
          $next_step = ($current_step < 5) ? $current_step + 1 : NULL;
          $link_text = !$next_step ? $publish_text : t('Next');
          $variables['next_link'] = Link::createFromRoute($link_text, 'opigno_learning_path.content_steps', [
            'group' => $group->id(),
            'current' => ($current_step) ? $current_step : 0,
          ], [
            'attributes' => [
              'class' => [
                'btn',
                'btn-success',
                'color-white'
              ]
            ]
          ])->toRenderable();
        }
        else {
          $variables['next_link'] = '';
        }
    }

    if (\Drupal::routeMatch()->getRouteName() == 'opigno_learning_path.membership.overview'
       && $variables['region'] == 'content'
       && $group = \Drupal::routeMatch()->getParameter('group')
    ) {
        $link = Link::createFromRoute(t('Add members'), 'entity.group_content.add_form', ['group' => $group->id(), 'plugin_id' => 'group_membership'], ['attributes' => ['id' => 'btn_member_add']])->toRenderable();
        $variables['add_member_link'] = render($link);
    }
}

/**
 * Implements hook_preprocess_page().
 */
function opigno_learning_path_preprocess_page(&$variables)
{
    $route = \Drupal::routeMatch()->getRouteName();
    $account = \Drupal::currentUser();

    // Hide local tasks
    if (opigno_learning_path_is_lp_route()) {
        unset($variables['page']['content']['platon_local_tasks']);
    }

    // Get join form
    if ($route == 'entity.group.canonical'
      && $group = \Drupal::routeMatch()->getParameter('group')
    ) {
        $form = \Drupal::service('opigno_learning_path.join_form')->getForm($group);

        if (!$group->getMember($account)) {
            $variables['join_group_form'] = Markup::create(
                '<div style="display: none;" id="join-group-form-overlay">
                    <div id="join-group-form-wrapper">
                        <div class="text-right"><button class="close-overlay">close</button></div>
                        <div>' . render($form) . '</div>
                    </div>
                </div>'
            );
        }
    }
}


/**
 * Implements template_preprocess_HOOK().
 */
function opigno_learning_path_preprocess_opigno_certificate(array &$variables) {
  /** @var \Drupal\opigno_certificate\CertificateInterface $opigno_certificate */
  $opigno_certificate = $variables['elements']['#opigno_certificate'];

  /** @var \Drupal\Core\Entity\ContentEntityInterface $referencing_entity */
  $referencing_entity = $opigno_certificate->referencing_entity->entity;

  // Provide the referencing entity context.
  if ($referencing_entity) {
    $completed = opigno_learning_path_completed_on($referencing_entity->id(), \Drupal::currentUser()->id());
    if ($completed) {
      $variables['completed_on'] = \Drupal::service('date.formatter')->format($completed, NULL, 'd/M/Y');
    }

    // @todo: add a proper API function to get courses for a learning path.

    $managed_content = OpignoGroupManagedContent::loadByProperties(['group_id' => $referencing_entity->id()]);
    $content_types_manager = \Drupal::service('opigno_learning_path.content_types.manager');
    foreach ($managed_content as $content) {
      // Need the content type object to get the LearningPathContent object.
      $content_type_id = $content->getGroupContentTypeId();
      if ($content_type_id == 'ContentTypeCourse') {
        $group = Group::load($content->getEntityId());
        $course_titles[] = $group->label();
      }
    }

    $variables['extra'] = implode(', ' , $course_titles);

  }
}


function opigno_learning_path_get_step_list_top()
{
    $group_type = opigno_learning_path_get_group_type();
    $steps = [];

    if ($group_type == 'learning_path') {
      $steps = [
          1 => t('Create training'),
          2 => t('Structure the training'),
          3 => t('Add modules to courses'),
          4 => t('Add activities to modules'),
          5 => t('Enroll learners')
      ];
    } elseif ($group_type == 'opigno_course') {
      $steps = [
          1 => t('Create training'),
          2 => t('Add modules to courses'),
          3 => t('Add activities to modules')
      ];
    } elseif ($group_type == 'opigno_module') {
      $steps = [
          1 => t('Create training'),
          2 => t('Add activities to modules')
      ];
    }

    $current_step = opigno_learning_path_get_current_step();
    $pased_steps = opigno_learning_path_validate_group_creating_steps();

    $html = '<ul class="d-flex justify-content-center text-center list-unstyled step-list-top mb-5">';
    foreach ($steps as $key => $step) {
        $classes = ['mx-4'];

        if ($current_step >= $key) {
            $classes[] = 'active';
        }

      if ($pased_steps) {
        if (in_array($key, $pased_steps)) { // @TODO check if step is validated
          $classes[] = 'done';
        }
      };


        $html .= '<li class="' . implode(' ', $classes) . '">';
        $html .= '<div class="number mx-auto">' . $key . '</div>';
        $html .= '<div class="title">' . $step . '</div>';
        $html .= '</li>';
    }
    $html .= '</ul>';

    // Add steps explanation.
    if ($group_type == 'learning_path') {
      $explanations = [
        1 => t('<p>A training is a program composed of diverse courses, modules and activities which guide students throughout their learning process.</p><p>Start here by describing the basic information of your learning program and click the button «Next» . You will be taken to step 2, to the Learning Path Manager to create content.</p>'),
        2 => t('<p>Welcome to the Learning Path Manager. It makes possible to build up the steps composing your training, that can be courses, modules and activities.</p><p>Start by adding or creating your first content block (course or module).</p>'),
        3 => t('In case you added some courses to your training, you can manage here the modules inside these courses . Note that you can also directly add modules in the training at step 2.'),
        4 => t('You can manage here the contents of the modules inside your training, add activities to them, manage the existing activities.'),
        5 => t('You can invite here users or classes (group of users) to join your training. The click on "Publish" button to have your training ready!'),
      ];

      $explanation = $explanations[$current_step];
      $html .= "<div class='lp_step_explanation'>$explanation</div>";
    }

    return new FormattableMarkup($html, []);
}

function opigno_learning_path_get_step_list_aside()
{
    $group_type = opigno_learning_path_get_group_type();
    $steps = [];

    if (\Drupal::routeMatch()->getParameters()->has('group')) {
      $entity = \Drupal::routeMatch()->getParameter('group');
    } elseif (\Drupal::routeMatch()->getParameters()->has('opigno_module')) {
      $entity = \Drupal::routeMatch()->getParameter('opigno_module');
    }

    if (isset($entity) && $entity->getEntityTypeId() == 'group') {
        $home_link = Link::createFromRoute(t('Home'), 'entity.group.canonical', ['group' => $entity->id()], ['attributes' => ['class' => ['btn', 'btn-primary', 'btn-home', 'w-100']]])->toRenderable();
        $description_link = Link::createFromRoute(t('Description'), 'entity.group.edit_form', ['group' => $entity->id()])->toRenderable();
        $lp_manager_link = Link::createFromRoute(t('Learning Path Manager'), 'opigno_group_manager.manager.index', ['group' => $entity->id()])->toRenderable();
        $modules_link = Link::createFromRoute(t('Modules'), 'opigno_learning_path.learning_path_courses', ['group' => $entity->id()])->toRenderable();
        $activities_link = Link::createFromRoute(t('Activities'), 'opigno_learning_path.learning_path_modules', ['group' => $entity->id()])->toRenderable();
        $members_link = Link::createFromRoute(t('Members'), 'opigno_learning_path.membership.overview', ['group' => $entity->id()])->toRenderable();
    } elseif (isset($entity) && $entity->getEntityTypeId() == 'opigno_module') {
        $description_link = Link::createFromRoute(t('Description'), 'opigno_module.edit', ['opigno_module' => $entity->id()])->toRenderable();
        $activities_link = Link::createFromRoute(t('Activities'), 'opigno_module.modules', ['opigno_module' => $entity->id()])->toRenderable();
    } else {
        $description_link = '<span>' . t('Description') . '</span>';
        $lp_manager_link = '<span>' . t('Learning Path Manager') . '</span>';
        $modules_link = '<span>' . t('Modules') . '</span>';
        $activities_link = '<span>' . t('Activities') . '</span>';
        $members_link = '<span>' . t('Members') . '</span>';
    }

    if ($group_type == 'learning_path') {
      $steps = [
          1 => $description_link,
          2 => $lp_manager_link,
          3 => $modules_link,
          4 => $activities_link,
          5 => $members_link
      ];
    } elseif ($group_type == 'opigno_course') {
      $steps = [
          1 => $description_link,
          2 => $modules_link,
          3 => $activities_link
      ];
    } elseif ($group_type == 'opigno_module') {
      $steps = [
          1 => $description_link,
          2 => $activities_link
      ];
    }

    $current_step = opigno_learning_path_get_current_step();
    $html = '';

    if (isset($home_link)) {
      $html .= '<div class="mb-3">' . render($home_link) . '</div>';
    }

    $html .= '<div class="step-list-aside-wrapper">
                <h2>' . t('Manage') . '</h2>
                <ul class="list-unstyled step-list-aside">';

    foreach ($steps as $key => $step) {
        if ($current_step == $key) {
            $html .= '<li class="active">' . render($step) . '</li>';
        } else {
            $html .= '<li>' . render($step) . '</li>';
        }
    }

    $html .= '</ul></div>';

    return new FormattableMarkup($html, []);
}

function opigno_learning_path_get_routes_steps()
{
    $type = opigno_learning_path_get_group_type();
    $steps = [];

    if ($type == 'learning_path') {
        $steps = [
            'entity.group.add_form' => 1,
            'entity.group.edit_form' => 1,
            'opigno_group_manager.manager.index' => 2,
            'opigno_learning_path.learning_path_courses' => 3,
            'opigno_learning_path.learning_path_modules' => 4,
            'opigno_learning_path.membership.overview' => 5,
            'entity.group_content.add_form' => 5
        ];
    } elseif ($type == 'opigno_course') {
        $steps = [
            'entity.group.add_form' => 1,
            'entity.group.edit_form' => 1,
            'opigno_learning_path.learning_path_courses' => 2,
            'opigno_learning_path.learning_path_modules' => 3
        ];
    } elseif ($type == 'opigno_module') {
        $steps = [
            'opigno_module.add' => 1,
            'opigno_module.edit' => 1,
            'opigno_module.modules' => 2
        ];
    }

    return $steps;
}

function opigno_learning_path_get_group_type()
{
  $type = null;
  $route = \Drupal::routeMatch()->getRouteName();

  if (\Drupal::routeMatch()->getParameters()->has('group_type')) {
    $type = \Drupal::routeMatch()->getParameter('group_type')->id();
  } elseif (\Drupal::routeMatch()->getParameters()->has('group')) {
    $type = \Drupal::routeMatch()->getParameter('group')->get('type')->getString();
  } elseif (\Drupal::routeMatch()->getParameters()->has('opigno_module')
    || $route == 'opigno_module.add'
  ) {
    $type = 'opigno_module';
  }

  return $type;
}

function opigno_learning_path_get_current_step()
{
    $steps = opigno_learning_path_get_routes_steps();

    return isset($steps[\Drupal::routeMatch()->getRouteName()]) ? $steps[\Drupal::routeMatch()->getRouteName()] : null ;
}

function opigno_learning_path_is_lp_route()
{
    $route = \Drupal::routeMatch()->getRouteName();
    $is_learning_path = false;
    $routes = [
      'opigno_group_manager.manager.index',
      'opigno_learning_path.learning_path_modules',
      'opigno_learning_path.learning_path_courses',
      'opigno_learning_path.membership.overview',
      'entity.group_content.add_form',
      'opigno_module.add',
      'opigno_module.edit',
      'opigno_module.modules'
    ];

    if ($route == 'entity.group.add_form'
      && (\Drupal::routeMatch()->getParameter('group_type')->id() == 'opigno_course'
      || \Drupal::routeMatch()->getParameter('group_type')->id() == 'learning_path')
    ) {
      $is_learning_path = true;
    }

    if (($route == 'entity.group.edit_form')
      && (\Drupal::routeMatch()->getParameter('group')->get('type')->getString() == 'opigno_course'
      || \Drupal::routeMatch()->getParameter('group')->get('type')->getString() == 'learning_path')
    ) {
      $is_learning_path = true;
    }

    if (in_array($route, $routes)) {
      $is_learning_path = true;
    }

    return $is_learning_path;
}

/**
 * Implements hook_help().
 */
function opigno_learning_path_help($route_name, RouteMatchInterface $route_match)
{
    switch ($route_name) {
    // Main module help for the opigno_learning_path module.
    case 'help.page.opigno_learning_path':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Add the Learning Path feature to the opigno instance') . '</p>';
      return $output;

    default:
      return '';
  }
}

/**
 * Implements hook_form_alter().
 */
function opigno_learning_path_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    $build_info = $form_state->getBuildInfo();
    $route_name = \Drupal::routeMatch()->getRouteName();

    if ($form_id == 'opigno_module_edit_form'
      || $form_id == 'opigno_module_add_form'
      || $form_id == 'opigno_module_form'
    ) {
      $form['created']['#access'] = false;
      $form['uid']['#access'] = false;
    }

    // Check if there is an entry with the key "learning_path_id".
    $is_learning_path = false;
    foreach ($build_info['args'] as $info_key => $info_value) {
        if (is_array($info_value) && key_exists('learning_path_info', $info_value)) {
            $is_learning_path = true;
            break;
        }
    }

    // If the form is from the learning_path_manager and has an entity, ajaxify it.
    if (
      $is_learning_path
      && method_exists($build_info['callback_object'], 'getEntity')
    ) {
        // Get the entity
        $entity = $build_info['callback_object']->getEntity();
        $entity_type = $entity->getEntityTypeId();
        $bundle = $entity->bundle();
        $id = $entity->id();

        // Add form class for ajaxification. In case of add form, append "new" instead of the entity ID.
        if ($id) {
            $ajax_id = 'ajax-form-entity-' . $entity_type . '-' . $bundle . '-' . $id;
        } else {
            $ajax_id = 'ajax-form-entity-' . $entity_type . '-' . $bundle . '-new';
        }
        $form['#attributes']['class'][] = $ajax_id;

        // Ajaxification settings of the buttons.
        $ajax_settings = array(
          'callback' => 'Drupal\opigno_learning_path\Controller\LearningPathManagerController::ajaxFormEntityCallback',
          'wrapper' => $ajax_id,
          'effect' => 'fade'
        );

        $form['#attached']['library'][] = 'opigno_learning_path/ajax_form';
        $form['actions']['submit']['#ajax'] = $ajax_settings;
        $form['actions']['publish']['#ajax'] = $ajax_settings;
        $form['actions']['unpublish']['#ajax'] = $ajax_settings;
        $form['actions']['preview']['#access'] = false;
        unset($form['actions']['publish']['#dropbutton']);
        unset($form['actions']['unpublish']['#dropbutton']);

        // Ajaxify the buttons.
        foreach (array_keys($form['actions']) as $action) {
            if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
                $form['actions'][$action]['#submit'][] = 'Drupal\opigno_learning_path\Controller\LearningPathManagerController::ajaxFormEntityFormSubmit';
            }
        }

        // Handle case of entity edition : define the options.
        if ($id) {
            $current_path = \Drupal::service('path.current')->getPath();
            $path_args = explode('/', $current_path);

            // Case of edit link.
            if ($path_args[1] == 'ajax-form-entity') {
                $view_mode = $path_args[5];
                $reload = false;
            }

            // Case of form inside the display of the entity.
            else {
                $view_mode = 'default';
                $reload = 'reload_entity';
            }
        }
        // Case of creation.
        else {
            $view_mode = 'default';
            $reload = true;
        }

        // Add all configurations to the form to make it available everywhere.
        $form['ajax_form_entity'] = [
          '#type' => 'hidden',
          '#value' => [
            'view_mode' => $view_mode,
            'reload' => $reload,
            'content_selector' => '.' . $ajax_id,
            'form_selector' => '.' . $ajax_id,
          ]
        ];
    }


    //  $destination = \Drupal::request()->get('destination', FALSE);
    //  if ($destination === FALSE || substr($destination, -7) != 'content') {
    //    return;
    //  }
    //
    //  // TODO: Maybe add a session variable before redirect the user to the "create new content" page and verify this session var here.
    //
    //  $destination_parts = explode('/', $destination);
    //  $destination_id = $destination_parts[3]; // TODO: Check that the destination ID is a learning path
    //  if (!is_numeric($destination_id)) {
    //    return;
    //  }
    //
    //  $tools_manager = new LearningPathToolsManager();
    //  $tools = $tools_manager->getTools();
    //  foreach($tools as $tool) {
    //    if ($tool->getCreateFormId() == $form_id || $tool->getEditFormId() == $form_id) {
    //      // Add the learning path ID to the form.
    //      $form['opigno_learning_path_id'] = [
    //        '#type' => 'hidden',
    //        '#value' => $destination_id
    //      ];
    //
    //      $form['opigno_learning_path_tool_entity_type'] = [
    //        '#type' => 'hidden',
    //        '#value' => $tool->getToolEntityType()
    //      ];
    //
    //      $form['opigno_learning_path_tool_entity_bundle'] = [
    //        '#type' => 'hidden',
    //        '#value' => $tool->getToolEntityBundle()
    //      ];
    //
    //      break;
    //    }
    //  }

    // Set fields visibility dependencies.
    if (in_array($form_id, ['group_learning_path_add_form', 'group_learning_path_edit_form'])) {
      $form['field_requires_validation']['#states'] = [
        'visible' => array(
          ':input[name="field_learning_path_visibility"]' => array('value' => 'semiprivate'),
        ),
      ];

      $form['field_anonymous_visibility']['#states'] = [
        'visible' => array(
          ':input[name="field_learning_path_visibility"]' => array('value' => 'semiprivate'),
        ),
      ];

      // Change the submit button title.
      $form['actions']['submit']['#value'] = t('Next');
      // Add redirect to the step 2.
      $form['actions']['submit']['#submit'][] = 'opigno_learning_path_add_form_redirect';

      // Unpublish existing training.
      if ($route_name == 'entity.group.edit_form') {
        $group = \Drupal::routeMatch()->getParameter('group');
        $form['actions']['submit']['unpublish'] = [
          '#type' => 'link',
          '#title' => t("Unpublish"),
          '#url' => Url::fromRoute('opigno_learning_path.manager.unpublish', [
            'group' => $group->id(),
          ]),
          '#attributes' =>
            ['class' => [
              'button',
            ]
          ],
          '#weight' => 2,
        ];
      };

    }

    // Set title for learning path step 1
    if ($form_id === 'group_learning_path_add_form') {
      $form['#title'] = t('Create training');
    }

    // Add custom submit callback to join/leave group form.
    if (in_array($form_id, [
      'group_content_learning_path-group_membership_group-join_form',
      'group_content_learning_path-group_membership_group-leave_form',
    ])) {
        $group = \Drupal::routeMatch()->getParameter('group');

        if ($form_id == 'group_content_learning_path-group_membership_group-join_form') {
            $visibility = $group->field_learning_path_visibility->value;
            $validation = $group->field_requires_validation->value;

            // Request membership flag.
            $form['user_status'] = ['#type' => 'hidden'];

            if ($visibility == 'public') {
                $form['user_status']['#value'] = 1;
            }

            if ($visibility == 'semiprivate') {
                if ($validation) {
                    // User message.
                    $form['user_message'] = [
            '#type' => 'textarea',
            '#title' => t('Request message'),
            '#description' => t('You can enter 200 symbols.'),
            '#attributes' => [
              'maxlength' => 200,
            ],
          ];
                    $form['user_status']['#value'] = 2;
                } else {
                    $form['user_status']['#value'] = 1;
                }
            }

            $form['membership_update_source'] = [
              '#type' => 'hidden',
              '#value' => 'join',
            ];
        }

        // Save group object for submit function.
        $form_state->setFormState(['group' => $group]);

        foreach (array_keys($form['actions']) as $action) {
            if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
                // Add custom submit to user join group form.
                $form['actions'][$action]['#submit'][] = 'opigno_learning_path_group_membership_form_submit';
            }
        }

        // Cancel link.
        unset($form['actions']['cancel']);
        $url = Url::fromRoute('entity.group.canonical', ['group' => $group->id()], ['attributes' => ['class' => 'button']]);
        $link = Link::fromTextAndUrl(t('Cancel'), $url)->toRenderable();
        $form['actions']['submit']['#suffix'] = render($link);
    }

    if ($form_id === 'group_content_learning_path-group_membership_edit_form') {
      $membership = \Drupal::routeMatch()->getParameter('group_content');
      if ($membership) {
          $status = LearningPathAccess::getMembershipStatus($membership->id());
      }

      $form['user_status'] = [
        '#type' => 'radios',
        '#title' => t('Status'),
        '#options' => LearningPathAccess::getMembershipStatusesArray(),
        '#required' => true,
        '#default_value' => !empty($status) ? $status : '',
        '#weight' => $form['group_roles']['#weight'] - 1,
      ];

      $form['membership_update_source'] = [
        '#type' => 'hidden',
        '#value' => 'edit',
      ];
    }

    if ($form_id === 'group_content_learning_path-group_membership_add_form') {
      unset($form['entity_id']);
      unset($form['group_roles']);
      unset($form['path']);
      unset($form['actions']);
      unset($form['#validate']);
      unset($form['#submit']);

      // Get all users.
      $uids = \Drupal::entityQuery('user')
        ->condition('uid', 0, '<>')
        ->sort('name')
        ->execute();
      $users = User::loadMultiple($uids);

      // Get all classes.
      $gids = \Drupal::entityQuery('group')
        ->condition('type', 'opigno_class')
        ->sort('label')
        ->execute();
      $classes = Group::loadMultiple($gids);

      // Get the current learning path group.
      /** @var \Drupal\group\Entity\Group $group */
      $group = \Drupal::routeMatch()->getParameter('group');

      // Remove users that already in group.
      $users = array_filter($users, function ($user) use ($group) {
        /** @var \Drupal\group\Entity\Group $group */
        return $group->getMember($user) === FALSE;
      });

      // Map users to user names.
      array_walk($users, function (&$user) {
        /** @var \Drupal\user\Entity\User $user */
        $user = $user->getDisplayName();
      });

      // Map classes to class names.
      array_walk($classes, function (&$class) {
        /** @var \Drupal\group\Entity\Group $class */
        $class = $class->label();
      });

      // Build the available options list.
      $options = [];

      foreach ($users as $uid => $user) {
        $options['user_' . $uid] = $user;
      }

      foreach ($classes as $gid => $class) {
        $options['class_' . $gid] = $class;
      }

      // Build the available users list for the add class form.
      $user_options = [];

      foreach ($users as $uid => $user) {
        $user_options['user_' . $uid] = $user;
      }

      $form['#title'] = t('Members in learning path');

      $form['btn_create'] = [
        '#type' => 'button',
        '#value' => t('Create new users'),
        '#attributes' => [
          'id' => 'btn_create',
        ],
      ];

      $form['pnl_create'] = [
        '#type' => 'container',
        '#attributes' => [
          'id' => 'pnl_create',
          'class' => ['pnl_create'],
        ],
        [
          '#type' => 'container',
          '#attributes' => [
            'class' => ['pnl_create_header'],
          ],
          [
            '#type' => 'html_tag',
            '#tag' => 'h2',
            '#value' => t('Create new members'),
            '#attributes' => [
              'class' => ['pnl_create_title'],
            ],
          ],
          [
            '#type' => 'button',
            '#value' => t('&times;'),
            '#attributes' => [
              'id' => 'pnl_create_btn_close',
              'class' => ['pnl_create_btn_close'],
            ],
          ],
        ],
        [
          '#type' => 'html_tag',
          '#tag' => 'hr',
        ],
        'btn_create_user' => [
          '#type' => 'button',
          '#value' => t('Create a new user'),
          '#attributes' => [
            'id' => 'pnl_create_btn_create_user',
            'class' => ['pnl_create_btn_create'],
          ],
        ],
        'btn_create_class' => [
          '#type' => 'button',
          '#value' => t('Create a new class'),
          '#attributes' => [
            'id' => 'pnl_create_btn_create_class',
            'class' => ['pnl_create_btn_create'],
          ],
        ],
      ];

      $form['pnl_create_user'] = [
        '#type' => 'container',
        '#attributes' => [
          'id' => 'pnl_create_user',
          'class' => ['pnl_create'],
        ],
        [
          '#type' => 'container',
          '#attributes' => [
            'class' => ['pnl_create_header'],
          ],
          [
            '#type' => 'html_tag',
            '#tag' => 'h2',
            '#value' => t('2/2 create a new user'),
            '#attributes' => [
              'class' => ['pnl_create_title'],
            ],
          ],
          [
            '#type' => 'button',
            '#value' => t('&times;'),
            '#attributes' => [
              'id' => 'pnl_create_user_btn_close',
              'class' => ['pnl_create_btn_close'],
            ],
          ],
        ],
        [
          '#type' => 'html_tag',
          '#tag' => 'hr',
        ],
        [
          '#type' => 'container',
          '#attributes' => [
            'class' => ['pnl_create_content'],
          ],
          'name' => [
            '#type' => 'textfield',
            '#title' => t('User Name'),
            '#placeholder' => t('Enter the learner name'),
            '#attributes' => [
              'id' => 'pnl_create_user_field_name',
              'class' => ['pnl_create_field'],
            ],
          ],
          'email' => [
            '#type' => 'textfield',
            '#title' => t('Email Address'),
            '#placeholder' => t('Enter the learner email'),
            '#attributes' => [
              'id' => 'pnl_create_user_field_email',
              'class' => ['pnl_create_field'],
            ],
          ],
          'create' => [
            '#type' => 'submit',
            '#value' => t('Create new user'),
            '#submit' => ['opigno_learning_path_group_membership_add_form_create_user_submit'],
            '#attributes' => [
              'id' => 'pnl_create_user_btn_create',
              'class' => ['pnl_create_btn_submit'],
            ],
          ],
        ],
      ];

      $form['pnl_create_class'] = [
        '#type' => 'container',
        '#attributes' => [
          'id' => 'pnl_create_class',
          'class' => ['pnl_create'],
        ],
        [
          '#type' => 'container',
          '#attributes' => [
            'class' => ['pnl_create_header'],
          ],
          [
            '#type' => 'html_tag',
            '#tag' => 'h2',
            '#value' => t('Create a new class'),
            '#attributes' => [
              'class' => ['pnl_create_title'],
            ],
          ],
          [
            '#type' => 'button',
            '#value' => t('&times;'),
            '#attributes' => [
              'id' => 'pnl_create_class_btn_close',
              'class' => ['pnl_create_btn_close'],
            ],
          ],
        ],
        [
          '#type' => 'html_tag',
          '#tag' => 'hr',
        ],
        [
          '#type' => 'container',
          '#attributes' => [
            'class' => ['pnl_create_content'],
          ],
          'class_name' => [
            '#type' => 'textfield',
            '#title' => t('Give a name to the class'),
            '#placeholder' => t('Enter the class name'),
            '#attributes' => [
              'id' => 'pnl_create_class_field_class_name',
              'class' => ['pnl_create_field'],
            ],
          ],
          'search_label' => [
            '#type' => 'label',
            '#title' => t('Add learners to the class'),
          ],
          'search' => [
            '#type' => 'textfield',
            '#autocomplete_route_name' => 'opigno_learning_path.membership.find_users_autocomplete',
            '#autocomplete_route_parameters' => [
              'group' => $group->id(),
            ],
            '#placeholder' => t('Search name or email'),
            '#attributes' => [
              'id' => 'pnl_create_class_field_search',
              'class' => ['pnl_create_field'],
            ],
          ],
          'select_all' => [
            '#type' => 'submit',
            '#value' => t('Select all'),
            '#submit' => [],
            '#attributes' => [
              'id' => 'pnl_create_class_btn_select_all',
              'class' => ['pnl_create_btn_submit'],
            ],
          ],
          'class_users' => [
            '#type' => 'select',
            '#options' => $user_options,
            '#multiple' => TRUE,
            '#attributes' => [
              'multiple' => TRUE,
              'id' => 'pnl_create_class_field_class_users',
              'class' => ['pnl_create_field'],
            ],
          ],
          'class_create' => [
            '#type' => 'submit',
            '#value' => t('Create new class'),
            '#submit' => ['opigno_learning_path_group_membership_add_form_create_class_submit'],
            '#attributes' => [
              'id' => 'pnl_create_class_btn_create',
              'class' => ['pnl_create_btn_submit'],
            ],
          ],
        ],
      ];

      $form['users_widget'] = [
        '#type' => 'container',
        '#attributes' => [
          'class' => [
            'row',
          ],
        ],
      ];

      // Displays available users list.
      $form['users_widget']['available'] = [
        '#type' => 'container',
        '#attributes' => [
          'class' => [
            'col-sm-5',
          ],
        ],
        'find_option_label' => [
          '#type' => 'label',
          '#title' => t('Find existing users or groups'),
        ],
        'find_option' => [
          '#type' => 'textfield',
          '#autocomplete_route_name' => 'opigno_learning_path.membership.find_user_group_autocomplete',
          '#autocomplete_route_parameters' => [
            'group' => $group->id(),
          ],
          '#placeholder' => t('Enter a user’s name or email'),
          '#attributes' => [
            'id' => 'find_option',
          ],
        ],
        'available_options' => [
          '#type' => 'select',
          '#options' => $options,
          '#attributes' => [
            'multiple' => TRUE,
            'id' => 'available_options',
          ],
        ],
      ];

      $form['users_widget']['buttons'] = [
        '#type' => 'container',
        '#attributes' => [
          'class' => [
            'col-sm-2',
          ],
        ],
        'add_option' => [
          '#type' => 'button',
          '#value' => '',
          '#attributes' => [
            'id' => 'add_option',
          ],
        ],
        'remove_option' => [
          '#type' => 'button',
          '#value' => '',
          '#attributes' => [
            'id' => 'remove_option',
          ],
        ],
      ];

      // Displays selected users list.
      $form['users_widget']['selected'] = [
        '#type' => 'container',
        '#attributes' => [
          'class' => [
            'col-sm-5',
          ],
        ],
        'selected_options_label' => [
          '#type' => 'label',
          '#title' => t('Selected options'),
        ],
        'selected_options' => [
          '#type' => 'select',
          '#options' => [],
          '#attributes' => [
            'multiple' => TRUE,
            'id' => 'selected_options',
          ],
        ],
      ];

      // Actual selected options list.
      $form['options'] = [
        '#type' => 'select',
        '#options' => $options,
        '#multiple' => TRUE,
        '#attributes' => [
          'multiple' => TRUE,
          'id' => 'options',
        ],
      ];

      $form['send_message'] = [
        '#type' => 'checkbox',
        '#title' => t('Notify user ?'),
      ];

      $form['message'] = [
        '#type' => 'textarea',
        '#placeholder' => t('I invite you to take part of my learning program to boost your skills'),
      ];

      $form['actions']['submit'] = [
        '#type' => 'submit',
        '#value' => t('Send invitation'),
      ];

      $form['#attached']['library'][] = 'opigno_learning_path/member_add';
      $form['#attached']['drupalSettings']['opigno_learning_path']['gid'] = $group->id();
      $form['#submit'] = ['opigno_learning_path_group_membership_add_form_submit'];
    }
}

/**
 * Adds redirect after creating new learning path.
 */
function opigno_learning_path_add_form_redirect(array $form, FormStateInterface $form_state)
{
  $group = $form_state->getFormObject()->getEntity();

  // If a learning path is created, redirect to the step 2.
  if (isset($group)) {
    $form_state->setRedirect('opigno_group_manager.manager.index', ['group' => $group->id()]);
  }
}

/**
 * Adds redirect after user join group.
 *
 * Clear cache if user join/leave group by himself.
 */
function opigno_learning_path_group_membership_form_submit(array $form, FormStateInterface $form_state)
{
    if ($group = $form_state->get('group')) {
        $form_state->setRedirect('entity.group.canonical', ['group' => $group->id()]);

        if (!in_array('administrator', \Drupal::currentUser()->getRoles())) {
            drupal_flush_all_caches();
        }
    }
}

/**
 * Callback used in opigno_learning_path_form_alter().
 */
function opigno_learning_path_group_membership_add_form_submit(array $form, FormStateInterface $form_state) {
  $options = $form_state->getValue('options');
  $send_message = $form_state->getValue('send_message');
  $message = $form_state->getValue('message');

  // Load added users & classes from the form_state.
  $users = [];
  $classes = [];

  foreach ($options as $option) {
    list($type, $id) = explode('_', $option);

    if ($type === 'user') {
      $users[] = $id;
    }
    elseif ($type === 'class') {
      $classes[] = $id;
    }
  }

  $users = User::loadMultiple($users);
  $classes = Group::loadMultiple($classes);

  // Load the learning path group.
  /** @var \Drupal\group\Entity\Group $group */
  $group = \Drupal::routeMatch()->getParameter('group');

  // Assign each class to the learning path.
  foreach ($classes as $class) {
    /** @var \Drupal\group\Entity\Group $class */
    $group->addContent($class, 'subgroup:opigno_class');

    // Add class members to the users.
    $members = $class->getMembers();

    foreach ($members as $member) {
      /** @var \Drupal\group\GroupMembership $member */
      $user = $member->getUser();
      $users[$user->id()] = $user;
    }
  }

  // Add each user to the learning path & send email.
  foreach ($users as $user) {
    if (!isset($user)) {
      continue;
    }

    // If user is already in learning path, do nothing.
    $existing = $group->getMember($user);
    if ($existing !== FALSE) {
      continue;
    }

    // Add user to the learning path.
    /** @var \Drupal\user\Entity\User $user */
    $group->addMember($user);

    if ($send_message) {
      // Send email.
      $module = 'opigno_learning_path';
      $key = 'opigno_learning_path_add_membership';
      $email = $user->getEmail();
      $lang = $user->getPreferredLangcode();
      $params = [];
      $params['subject'] = t('Opigno notification');
      $params['message'] = $message;

      \Drupal::service('plugin.manager.mail')
        ->mail($module, $key, $email, $lang, $params);
    }
  }

  $form_state->setRedirect('opigno_learning_path.membership.overview', [
    'group' => $group->id(),
  ]);
}

/**
 * Callback used in opigno_learning_path_form_alter().
 */
function opigno_learning_path_group_membership_add_form_create_user_submit(array $form, FormStateInterface $form_state) {
  $name = $form_state->getValue('name');
  $email = $form_state->getValue('email');

  /** @var \Drupal\user\Entity\User $user */
  $user = User::create();
  $user->enforceIsNew();
  $user->setUsername($name);
  $user->setEmail($email);
  $user->activate();
  $user->save();

  \Drupal::messenger()->addMessage('New user profile created');
}

/**
 * Callback used in opigno_learning_path_form_alter().
 */
function opigno_learning_path_group_membership_add_form_create_class_submit(array $form, FormStateInterface $form_state) {
  $name = $form_state->getValue('class_name');
  $uids = $form_state->getValue('class_users');
  $users = User::loadMultiple($uids);

  /** @var \Drupal\group\Entity\Group $group */
  $group = Group::create([
    'type' => 'opigno_class',
    'label' => $name,
  ]);
  $group->save();

  foreach($users as $user) {
    if (!$user) {
      continue;
    }

    $group->addMember($user);
  }

  \Drupal::messenger()->addMessage('New class created');
}

/**
 * Sets additional fields for group visibility.
 *
 * Implements hook_ENTITY_TYPE_presave().
 */
function opigno_learning_path_group_presave(Group $group)
{
    $type = $group->type->entity->id();
    if ($type == 'learning_path') {
        LearningPathAccess::setVisibilityFields($group);
    }
}

/**
 * Restricts user access to Learning Path and it's content.
 *
 * Implements hook_ENTITY_TYPE_access().
 */
function opigno_learning_path_group_access(Group $group, $operation, AccountInterface $account) {
  $type = $group->type->entity->id();


  if ($type == 'learning_path' && $operation == 'view certificate' && LearningPathAccess::getGroupAccess($group, $account)) {
    $completed = opigno_learning_path_completed_on($group->id(), $account->id());
    return AccessResult::allowedIf($completed);
  }

  if ($type == 'learning_path' && !LearningPathAccess::getGroupAccess($group, $account)) {
    return AccessResult::forbidden();
  }
  if ($type == 'opigno_course' && !LearningPathAccess::getGroupContentAccess($group, $account)) {
    return AccessResult::forbidden();
  }
}

/**
 * Restricts user access to Learning Path content.
 *
 * Implements hook_ENTITY_TYPE_access().
 */
function opigno_learning_path_opigno_module_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if (!LearningPathAccess::getGroupContentAccess($entity, $account)) {
    return AccessResult::forbidden();
  }
}

/**
 * Implements hook_entity_update().
 */
function opigno_learning_path_entity_update(EntityInterface $entity)
{
    if ($entity->bundle() == 'learning_path-group_membership') {
      LearningPathAccess::mergeUserStatus($entity);
    }

    if ($entity->getEntityTypeId() === 'user_module_status') {
      // If user in training context.
      $group_id = OpignoGroupContext::getCurrentGroupId();
      if (isset($group_id)) {
        /** @var \Drupal\opigno_module\Entity\UserModuleStatus $entity */
        /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
        $module = $entity->getModule();
        $module_id = $module->id();

        // Update latest group activity.
        LatestActivity::insertGroupActivity($group_id, $module_id);
      }
    }
}

/**
 * Implements hook_entity_delete().
 */
function opigno_learning_path_entity_delete(EntityInterface $entity)
{
    if (in_array($entity->bundle(), [
      'learning_path-group_membership',
      'opigno_course-group_membership',
    ])) {
        LearningPathAccess::deleteUserStatus($entity);
        if ($entity->bundle() == 'learning_path-group_membership') {
            LearningPathAccess::setLearningPathCourseMember($entity, 'delete');
        }
    }
}

/**
 * @param \Drupal\group\Entity\Group $group
 *
 * @return array
 */
function opigno_learning_path_get_student_managers($group) {
  $users = [];

  $owner = $group->getOwner();
  $users[$owner->id()] = $owner;

  $content = $group->getContent();
  $student_manager_role = 'learning_path-learning_path_mana';

  /** @var \Drupal\group\Entity\GroupContentInterface $item */
  foreach ($content as $item) {
    $entity = $item->getEntity();
    $type = $entity->getEntityTypeId();

    if ($type !== 'user') {
      continue;
    }

    $membership = $group->getMember($entity);
    $roles = array_keys($membership->getRoles());

    if (in_array($student_manager_role, $roles)) {
      $users[$entity->id()] = $entity;
    }
  }

  return $users;
}

/**
 * Implements hook_entity_presave().
 */
function opigno_learning_path_entity_presave(EntityInterface $entity)
{
    if ($entity->bundle() == 'learning_path-group_membership') {
        /** @var \Drupal\group\Entity\GroupContentInterface $entity */
        LearningPathAccess::membershipPreSave($entity);
        $uid = $entity->getEntity()->id();
        $group = $entity->getGroup();
        $gid = $group->id();

        // Add notifications to user.
        if ($entity->isNew()) {
          opigno_set_message($uid, t('Enrolled to a new training @name', [
            '@name' => $group->label(),
          ]));

          $user = User::load($uid);
          $visibility = $group->field_learning_path_visibility->value;
          $validation = $group->field_requires_validation->value;

          if ($visibility === 'semiprivate' && $validation) {
            // Send an email to the managers of group.
            $module = 'opigno_learning_path';
            $key = 'opigno_learning_path_membership_needs_validate';
            $site_config = \Drupal::config('system.site');
            $link = Url::fromUri('internal:/group/' . $gid . '/members')
              ->setAbsolute()->toString();

            $receivers = opigno_learning_path_get_student_managers($group);
            foreach ($receivers as $uid => $receiver) {
              if ($user->id() === $uid) {
                continue;
              }

              $email = $receiver->getEmail();
              $lang = $receiver->getPreferredLangcode();
              $params = [];
              $params['subject'] = t('A user @username has requested to joining the group @training', [
                '@username' => $user->getDisplayName(),
                '@training' => $group->label(),
              ]);
              $params['message'] = t('Dear @username

A user @request_username has requested to joining the group @training.
You can manage the membership at: <a href=":link">@link_text</a>

@platform', [
                '@username' => $receiver->getDisplayName(),
                '@request_username' => $user->getDisplayName(),
                '@training' => $group->label(),
                ':link' => $link,
                '@link_text' => $link,
                '@platform' => $site_config->get('name'),
              ]);

              \Drupal::service('plugin.manager.mail')
                ->mail($module, $key, $email, $lang, $params);
            }
          }
        } else {
          $orig_status = LearningPathAccess::getMembershipStatus($entity->id(), FALSE);
          $new_status = \Drupal::request()->get('user_status');

          if (isset($new_status)
            && $new_status != $orig_status
            && $new_status == '1') {
            opigno_set_message($uid, t('Enrollment validated to a new training @name', [
              '@name' => $group->label(),
            ]));
          }
        }
    }
}

/**
 * Implements hook_mail().
 */
function opigno_learning_path_mail($key, &$message, $params)
{
  if (in_array($key, [
    'opigno_learning_path_user_subscribe',
    'opigno_learning_path_add_membership',
    'opigno_learning_path_membership_needs_validate',
    'opigno_learning_path_membership_validated',
  ])) {
    $message['from'] = \Drupal::config('system.site')->get('name');
    $message['subject'] = $params['subject'];
    $message['body'][] = $params['message'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function opigno_learning_path_form_opigno_module_delete_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Get the module entity object.
  $build_info = $form_state->getBuildInfo();
  $module = $build_info['callback_object']->getEntity();
  // Group content storage.
  $group_content_storage = Drupal::entityTypeManager()->getStorage('group_content');
  $query = $group_content_storage->getQuery();
  // Check if module related to at least one group.
  $gid = $query->condition('entity_id', $module->id())
    ->condition('type', ['group_content_type_162f6c7e7c4fa', 'group_content_type_411cfb95b8271'], 'IN')
    ->execute();
  // If it's exist as group content hide the delete button.
  if (!empty($gid)) {
    $form['description'] = [
      '#markup' => t('This module is being used and it needs to be removed from the group before being able to delete it.'),
    ];
    unset($form['actions']['submit']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function opigno_learning_path_form_group_opigno_course_delete_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Get the course entity object.
  $build_info = $form_state->getBuildInfo();
  $course = $build_info['callback_object']->getEntity();
  // Group content storage.
  $group_content_storage = Drupal::entityTypeManager()->getStorage('group_content');
  $query = $group_content_storage->getQuery();
  // Check if course related to at least one group.
  $gid = $query->condition('entity_id', $course->id())
    ->condition('type', 'group_content_type_af9d804582e19')
    ->execute();
  // If it's exist as group content hide the delete button.
  if (!empty($gid)) {
    $form['description'] = [
      '#markup' => t('This course is being used and it needs to be removed from the group before being able to delete it.'),
    ];
    unset($form['actions']['submit']);
  }
}

/**
 * Implements hook_views_query_alter().
 */
function opigno_learning_path_views_query_alter(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\query\QueryPluginBase $query) {
  // Hide learning paths from catalog for anonymous depending on the field value.
  if ($view->id() == 'opigno_training_catalog' && Drupal::currentUser()->id() == 0) {
    // Join the anonymous field table.
    $definition = [
      'table' => 'group__field_anonymous_visibility',
      'field' => 'entity_id',
      'left_table' => 'groups_field_data',
      'left_field' => 'id',
    ];
    $join = Drupal::service('plugin.manager.views.join')
      ->createInstance('standard', $definition);
    // Add relation and where condition.
    $query->addRelationship('group__field_anonymous_visibility', $join, 'group__field_anonymous_visibility');
    $query->where[] = [
      'conditions' => [
        [
          'field' => 'group__field_anonymous_visibility.field_anonymous_visibility_value',
          'value' => 1,
          'operator' => '!=',
        ],
      ],
      'type' => 'AND',
    ];
  }
}

/**
 * Implements hook_entity_insert().
 */
function opigno_learning_path_entity_insert(EntityInterface $entity)
{
    if ($entity->bundle() == 'learning_path-group_membership') {
        LearningPathAccess::mergeUserStatus($entity);
    }
    // If the destination is not the learning path contents list, leave the function.
    //  $destination = \Drupal::request()->get('destination', FALSE);
    //  if ($destination === FALSE || substr($destination, -8) != '/content') {
    //    return;
    //  }
    //
    //  // TODO: Maybe add a session variable before redirect the user to the "create new content" page and verify this session var here.
    //
    //  $destination_parts = explode('/', $destination);
    //  $destination_id = $destination_parts[3]; // TODO: Check that the destination ID is a learning path
    //  if (!is_numeric($destination_id)) {
    //    return;
    //  }
    //
    //  $request = \Drupal::request();
    //  if (
    //    empty($request->get('opigno_learning_path_id'))
    //    || empty($entity->id())
    //    || empty($request->get('opigno_learning_path_tool_entity_type'))
    //  ) {
    //    return;
    //  }
    //
    //  $content_nid = $entity->id();
    //  $learning_path_id = $request->get('opigno_learning_path_id');
    //  $content_type = $request->get('opigno_learning_path_tool_entity_type');
    //  $content_bundle = $request->get('opigno_learning_path_tool_entity_bundle');
    //
    //  $db = new LearningPathContentsDatabase(\Drupal::getContainer()->get('database'));
    //  $db->addContent($learning_path_id, $content_type, $content_bundle, $content_nid);

    //  ksm(['e' => $entity, 'r' => \Drupal::request(), 'id' => $entity->id(), 'lp' => $request->get('opigno_learning_path_id', FALSE)]);
}

//function opigno_learning_path_linked_content_form_submit(array $form, \Drupal\Core\Form\FormStateInterface $form_state) {
//  ksm(['state' => $form_state, 'form' => $form, 'req' => \Drupal::request()]);
//  $content_nid = $form_state->getValue('nid');
//  $learning_path_id = $form_state->getValue('opigno_learning_path_id');
//  $content_type = $form_state->getValue('opigno_learning_path_tool_entity_type');
//  $content_bundle = $form_state->getValue('opigno_learning_path_tool_entity_bundle');
//
//  $db = new LearningPathContentsDatabase(\Drupal::getContainer()->get('database'));
//  $db->addContent($learning_path_id, $content_type, $content_bundle, $content_nid);
//}

/**
 * Calculates module attempt score.
 *
 * @param \Drupal\opigno_module\Entity\UserModuleStatus $attempt
 *
 * @return int
 *  Score in percent.
 */
function opigno_learning_path_get_attempt_score($attempt) {
  $id = $attempt->id();
  $result = &drupal_static(__FUNCTION__ . "_$id");

  if (!isset($result)) {
    $score = (int) $attempt->calculateScore();
    $max_score = (int) $attempt->calculateMaxScore();

    if ($max_score <= 0) {
      return 0;
    }

    // Clamp score.
    $score = max(0, $score);
    $score = min($max_score, $score);

    // Convert absolute values to percent.
    $result = round(100 * $score / $max_score);
  }

  return $result;
}

/**
 * Calculates module best score.
 *
 * @param int $id
 *  Module id.
 * @param int $uid
 *  User id.
 *
 * @return int
 *  Score in percent.
 */
function opigno_learning_path_get_module_best_score($id, $uid) {
  $score = &drupal_static(__FUNCTION__ . "_${id}_$uid");

  if (!isset($best_score)) {
    $opigno_module = OpignoModule::load($id);
    $user = User::load($uid);

    // For each attempt, check the score and save the best one.
    $user_attempts = $opigno_module->getModuleAttempts($user);
    $best_score = 0;

    /* @var \Drupal\opigno_module\Entity\UserModuleStatus $user_attempt */
    foreach ($user_attempts as $user_attempt) {
      // Get the scores.
      $actual_score = opigno_learning_path_get_attempt_score($user_attempt);

      // Save the best score.
      if ($actual_score > $best_score) {
        $best_score = $actual_score;
      }
    }

    $score = $best_score;
  }

  return $score;
}

/**
 * Builds up a list of steps in a group for a user.
 *
 * @param int $group_id
 * @param int $uid
 *
 * @return array
 *   Info about each step in a group for a user.
 */
function opigno_learning_path_get_steps($group_id, $uid) {
  $steps = &drupal_static(__FUNCTION__ . "_${group_id}_$uid");

  if (!isset($steps)) {
    $user = User::load($uid);
    /** @var \Drupal\opigno_group_manager\OpignoGroupContentTypesManager $content_type_manager */
    $content_type_manager = \Drupal::service('opigno_group_manager.content_types.manager');

    $steps = [];
    /** @var \Drupal\opigno_group_manager\Entity\OpignoGroupManagedContent $first_content */
    $step = OpignoGroupManagedContent::getFirstStep($group_id);

    while ($step) {
      $cid = $step->id();
      $id = $step->getEntityId();
      $type_id = $step->getGroupContentTypeId();
      $type = $content_type_manager->createInstance($type_id);
      /** @var \Drupal\opigno_group_manager\OpignoGroupContent $content */
      $content = $type->getContent($id);

      $name = $content->getTitle();
      $typology = str_replace('ContentType', '', $type_id);

      // Get score required to pass step in percents.
      $required_score = (int) $step->getSuccessScoreMin();

      if ($type_id === 'ContentTypeModule') {
        // Get best score.
        $best_score = opigno_learning_path_get_module_best_score($id, $uid);

        /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
        $module = OpignoModule::load($id);
        $attempts = $module->getModuleAttempts(User::load($uid));

        // Get activities.
        $activities = $module->getModuleActivities();
        /** @var \Drupal\opigno_module\Entity\OpignoActivity[] $activities */
        $activities = array_map(function ($activity) {
          return OpignoActivity::load($activity->id);
        }, $activities);

        // Get activities count.
        $activities_count = count($activities);

        // Filter finished attempts.
        $attempts = array_filter($attempts, function ($attempt)
          use ($required_score, $module, $user, $activities) {
          /** @var \Drupal\opigno_module\Entity\UserModuleStatus $attempt */
          return (int) $attempt->get('finished')->getValue()[0]['value'] > 0;
        });
        $attempts_count = count($attempts);

        // Get time spent.
        $time_spent = array_sum(array_map(function ($attempt) {
          /** @var \Drupal\opigno_module\Entity\UserModuleStatus $attempt */
          $started = (int) $attempt->get('started')->getValue()[0]['value'];
          $finished = (int) $attempt->get('finished')->getValue()[0]['value'];

          return $finished > $started ? $finished - $started : 0;
        }, $attempts));

        // Get finish date of the first attempt that has passed.
        $passed_attempts = array_filter($attempts, function ($attempt)
          use ($required_score, $module, $user, $activities) {
          /** @var \Drupal\opigno_module\Entity\UserModuleStatus $attempt */
          // Check that all actual module activities is evaluated.
          $evaluated = TRUE;
          foreach ($activities as $activity) {
            $answer = $activity->getUserAnswer($module, $attempt, $user);

            if ($answer === NULL) {
              $evaluated = FALSE;
            }
          }

          $score = opigno_learning_path_get_attempt_score($attempt);
          return $evaluated && $score >= $required_score;
        });

        $completed_on = !empty($passed_attempts) ? min(array_map(function ($attempt) {
          /** @var \Drupal\opigno_module\Entity\UserModuleStatus $attempt */
          return (int) $attempt->get('finished')->getValue()[0]['value'];
        }, $passed_attempts)) : 0;
      }
      elseif ($type_id === 'ContentTypeCourse') {
        $course_steps = opigno_learning_path_get_steps($id, $uid);

        // Get best score as an average modules best score.
        if (!empty($course_steps)) {
          $step_count = count($course_steps);
          $best_score = round(array_sum(array_map(function ($step) {
            return $step['best score'];
          }, $course_steps)) / $step_count);
        }
        else {
          $best_score = 0;
        }

        $attempts_count = 0;
        $activities_count = 0;

        // Sum of steps time spent.
        $time_spent = array_sum(array_map(function ($step) {
          return (int) $step['time spent'];
        }, $course_steps));

        // Get completed steps.
        $completed_steps = array_filter($course_steps, function ($step) {
          return $step['completed on'] > 0;
        });

        $completed_on = 0;

        // If all steps completed.
        if ($course_steps && count($course_steps) === count($completed_steps)) {
          // Get the last completion time.
          $completed_on = max(array_map(function ($step) {
            return $step['completed on'];
          }, $course_steps));
        }
      }
      else {
        $attempts_count = 0;
        $activities_count = 0;
        $best_score = 0;
        $time_spent = 0;
        $completed_on = 0;
      }

      $step_info = [
        // OpignoGroupManagedContent id.
        'cid' => $cid,
        // Group/Module entity id.
        'id' => $id,
        'name' => $name,
        'typology' => $typology,
        'time spent' => $time_spent,
        'completed on' => $completed_on,
        'best score' => $best_score,
        'required score' => $required_score,
        'attempts' => $attempts_count,
        'activities' => $activities_count,
        'mandatory' => $step->isMandatory(),
      ];
      $steps[] = $step_info;

      // If user is not attempted step,
      // assume user has got 100% score.
      if (!opigno_learning_path_is_attempted($step_info, $uid)) {
        $best_score = 100;
      }

      $step = $step->getNextStep($best_score);
    }
  }

  return $steps;
}

/**
 * Get activities in a module for a user.
 *
 * @param int $module_id
 * @param int $uid
 *
 * @return array
 *   Info about each activity status for a user.
 */
function opigno_learning_path_get_module_activities($module_id, $uid) {
  $user = User::load($uid);

  /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
  $module = OpignoModule::load($module_id);

  /** @var \Drupal\opigno_module\Entity\UserModuleStatus[] $attempts */
  $attempts = $module->getModuleAttempts($user);

  // Load activities for a module.
  $module_activities = $module->getModuleActivities();
  $activities = array_map(function ($activity) use ($user, $module, $attempts) {
    // Value returned by the OpignoModule::getModuleActivities() is not an OpignoActivity.
    /** @var \Drupal\opigno_module\Entity\OpignoActivity $activity */
    $activity = OpignoActivity::load($activity->id);

    /** @var \Drupal\opigno_module\Entity\OpignoAnswer[] $answers */
    $answers = array_map(function ($attempt) use ($user, $module, $activity) {
      /** @var \Drupal\opigno_module\Entity\OpignoActivity $activity */
      return $activity->getUserAnswer($module, $attempt, $user);
    }, $attempts);

    // The OpignoActivity::getUserAnswer() may return NULL.
    $answers = array_filter($answers, function ($answer) {
      return isset($answer);
    });

    return [
      'activity_id' => $activity->id(),
      'module_id' => $module->id(),
      'answers' => count($answers),
    ];
  }, $module_activities);

  return $activities;
}

/**
 * Get activities in a group for a user.
 *
 * @param int $group_id
 * @param int $uid
 *
 * @return array
 *   Info about each activity status for a user.
 */
function opigno_learning_path_get_activities($group_id, $uid) {
  $activities = [];
  $steps = opigno_learning_path_get_steps($group_id, $uid);

  foreach ($steps as $step) {
    if ($step['typology'] === 'Module') {
      $module_activities = opigno_learning_path_get_module_activities($step['id'], $uid);
      $activities = array_merge($activities, $module_activities);
    }
    elseif ($step['typology'] === 'Course') {
      $course_activities = opigno_learning_path_get_activities($step['id'], $uid);
      $activities = array_merge($activities, $course_activities);
    }
  }

  return $activities;
}

/**
 * Calculates progress in a group for a user.
 *
 * @param int $group_id
 * @param int $uid
 *
 * @return float
 *   Attempted activities count / total activities count.
 */
function opigno_learning_path_progress($group_id, $uid) {
  $activities = opigno_learning_path_get_activities($group_id, $uid);

  $total = count($activities);
  $attempted = count(array_filter($activities, function ($activity) {
    return $activity['answers'] > 0;
  }));

  return $total > 0
    ? $attempted / $total
    : 0;
}

/**
 * Calculates learning path completion date.
 *
 * @param int $group_id
 * @param int $uid
 *
 * @return int
 */
function opigno_learning_path_completed_on($group_id, $uid) {
  // Get all mandatory steps.
  $steps = opigno_learning_path_get_steps($group_id, $uid);
  $mandatory_steps = array_filter($steps, function ($step) {
    return $step['mandatory'];
  });

  $completed_on = 0;

  // If has mandatory steps.
  if (!empty($mandatory_steps)) {
    $completed_steps = array_filter($mandatory_steps, function ($step) {
      return $step['completed on'] > 0;
    });

    // If all mandatory steps completed.
    if (count($mandatory_steps) === count($completed_steps)) {
      // Get completion time of the last mandatory step.
      $completed_on = max(array_map(function ($step) {
        return $step['completed on'];
      }, $mandatory_steps));
    }
  }

  return $completed_on;
}

/**
 * @param array|\Drupal\group\Entity\GroupInterface $step
 *   Learning Path or Course Group entity,
 *   or step array, returned by opigno_learning_path_get_steps()
 *
 * @param int $uid
 *
 * @return bool
 */
function opigno_learning_path_is_attempted($step, $uid) {
  if (is_array($step)) {
    if ($step['typology'] === 'Course') {
      $steps = opigno_learning_path_get_steps($step['id'], $uid);
    }
    else {
      return $step['attempts'] > 0;
    }
  }
  else {
    $steps = opigno_learning_path_get_steps($step->id(), $uid);
  }

  // If at least one step has attempted.
  return !empty(array_filter($steps, function ($step) use ($uid) {
    return opigno_learning_path_is_attempted($step, $uid);
  }));
}

/**
 * @param array|\Drupal\group\Entity\GroupInterface $step
 *   Learning Path or Course Group entity,
 *   or step array, returned by opigno_learning_path_get_steps()
 *
 * @param int $uid
 *
 * @return bool
 */
function opigno_learning_path_is_passed($step, $uid) {
  if (is_array($step)) {
    if ($step['typology'] === 'Course') {
      $steps = opigno_learning_path_get_steps($step['id'], $uid);
    }
    else {
      return opigno_learning_path_is_attempted($step, $uid)
        && $step['completed on'] > 0
        && $step['best score'] >= $step['required score'];
    }
  }
  else {
    $steps = opigno_learning_path_get_steps($step->id(), $uid);

    // Check only mandatory steps.
    $steps = array_filter($steps, function ($step) {
      return $step['mandatory'];
    });
  }

  // Not passed, if haven't steps.
  if (empty($steps)) {
    return FALSE;
  }

  // If all steps has passed.
  return empty(array_filter($steps, function ($step) use ($uid) {
    return !opigno_learning_path_is_passed($step, $uid);
  }));
}

/**
 * Function to detect if user already started Learning path.
 *
 * @param \Drupal\group\Entity\Group $group
 * @param \Drupal\Core\Session\AccountInterface $user
 *
 * Return current result attempt if it's exist or FALSE if not.
 */
function opigno_learning_path_started(Group $group, \Drupal\Core\Session\AccountProxyInterface $user) {
  return \Drupal\opigno_learning_path\Entity\LPResult::getCurrentLPAttempt($group, $user);
}


/**
 * Function to detect if all steps of creating learning path are correctly filled.
 *
 * Return array with the correctly filled steps.
 */
function opigno_learning_path_validate_group_creating_steps() {
  $is_learning_path_route = opigno_learning_path_is_lp_route();
  if ($is_learning_path_route) {
    // Load the learning path group.
    $group = \Drupal::routeMatch()->getParameter('group');
    if (!$group) {
      // First step - group is not created yet.
      $steps_number = [];
      return $steps_number;
    };
    $group_type = $group->getGroupType()->id();
    $steps = OpignoGroupManagedContent::loadByGroupId($group->id());
    // array with steps number.
    $steps_number = array_values(opigno_learning_path_get_routes_steps());
    $steps_number = array_unique($steps_number);
    if (!$steps) {
      // Means group is empty or all steps are invalid.
      $steps_number = [1];
    }
    else {

      // Check if there is at least one mandatory entity.
      $has_mandatory_item = FALSE;
      foreach ($steps as $key => $step) {
        if ($step->isMandatory()) {
          $has_mandatory_item = TRUE;
        };
      }
      if (!$has_mandatory_item) {
        $steps_number = array_diff($steps_number, [2]);
      };

      foreach ($steps as $key => $step) {
        $id = $step->getEntityId();
        $type_id = $step->getGroupContentTypeId();
        if ($group_type == 'learning_path') {
          // Check if each module has at least one activity.
          if ($type_id === 'ContentTypeModule') {
            $module = OpignoModule::load($id);
            $activities = $module->getModuleActivities();
            if (!$activities) {
              $steps_number = array_diff($steps_number, [4]);
            };
          }
          elseif ($type_id === 'ContentTypeCourse') {
            $course_steps = OpignoGroupManagedContent::loadByGroupId($id);
            if (!$course_steps) {
              // Means course group is empty, so 3 and 4 steps are invalid.
              $steps_number = array_diff($steps_number, [3, 4]);
            }
            else {
              // Check if each course module has at least one activity
              foreach ($course_steps as $key => $step) {
                $id = $step->getEntityId();
                $module = OpignoModule::load($id);
                $activities = $module->getModuleActivities();
                if (!$activities) {
                  $steps_number = array_diff($steps_number, [4]);
                };
              }
            }
          }
        }
        elseif ($group_type == 'opigno_course') {
          $course_steps = OpignoGroupManagedContent::loadByGroupId($id);
          if (!$course_steps) {
            // Means course group is empty, so 2 and 3 steps are invalid.
            $steps_number = array_diff($steps_number, [2, 3]);
          }
          else {
            foreach ($course_steps as $key => $step) {
              $id = $step->getEntityId();
              $module = OpignoModule::load($id);
              if ($module) {
                $activities = $module->getModuleActivities();
                if (!$activities) {
                  $steps_number = array_diff($steps_number, [3]);
                }
              };
            }
          }
        }
      }
    }
    return $steps_number;
  }
  return FALSE;
}

/**
 * Function to detect if user has resumed step in LP.
 *
 * Return step content id or FALSE if there is no resumed step.
 */
function opigno_learning_path_resumed_step(array $steps) {
  $account = \Drupal::currentUser();
  // Array with all finished modules.
  $attempts_finished = [];
  foreach ($steps as $index => $step) {
    $opigno_module = OpignoModule::load($step['id']);

    if ($opigno_module != NULL) {
      $attempts = $opigno_module->getModuleAttempts($account);
      if ($attempts) {
        // Get last attempt.
        $last_attempt = end($attempts);

        if (!$last_attempt->isFinished()) {
          // Means last attempt is unfinished. Return FALSE.
          break;
        };
        //
        $attempts_finished[$opigno_module->id()] = intval($last_attempt->get('finished')->value);
      };
    }
  }
  if (!empty($attempts_finished)) {
    // Get last finished opigno_module id
    $last_module_id = reset(array_keys($attempts_finished, max($attempts_finished)));
    $last_step = end($steps);
    if ($last_module_id == $last_step['id']) {
      // continue
    }
    else {
      for ($i = 0; $i < count($steps); ++$i) {
        if (intval($steps[$i]['id']) == $last_module_id) {
          $next_step_cid = $steps[$i + 1]['cid'];
          return $next_step_cid;
        };
      }
    }
  }
  return FALSE;
}
